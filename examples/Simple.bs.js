// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Infix$BsRouter = require("../src/Infix.bs.js");
var Router$BsRouter = require("../src/Router.bs.js");
var Segment$BsRouter = require("../src/Segment.bs.js");

function hiHandler(param) {
  return "Hello, World";
}

function helloHandler(param) {
  return "Hello, Routes";
}

function sumHandler(a, b) {
  return "Sum of " + (String(a) + (" and " + (String(b) + (" = " + String(a + b | 0)))));
}

function idHandler(id) {
  return "Requested user with id " + String(id);
}

function adminHandler(a) {
  if (a) {
    return "User is admin";
  } else {
    return "User is not an admin";
  }
}

var routes = Router$BsRouter.make(/* :: */[
      Infix$BsRouter.$neg$neg$great(Infix$BsRouter.$slash$question((function (param) {
                  return Segment$BsRouter.s("hi", param);
                }), Segment$BsRouter.nil), "Hello, World"),
      /* :: */[
        Infix$BsRouter.$neg$neg$great(Infix$BsRouter.$slash$question((function (param) {
                    return Infix$BsRouter.$slash((function (param) {
                                  return Infix$BsRouter.$slash((function (param) {
                                                return Segment$BsRouter.s("hello", param);
                                              }), (function (param) {
                                                return Segment$BsRouter.s("from", param);
                                              }), param);
                                }), (function (param) {
                                  return Segment$BsRouter.s("routes", param);
                                }), param);
                  }), Segment$BsRouter.nil), "Hello, Routes"),
        /* :: */[
          Infix$BsRouter.$neg$neg$great(Infix$BsRouter.$slash$question((function (param) {
                      return Infix$BsRouter.$slash((function (param) {
                                    return Infix$BsRouter.$slash((function (param) {
                                                  return Segment$BsRouter.s("sum", param);
                                                }), Segment$BsRouter.$$int, param);
                                  }), Segment$BsRouter.$$int, param);
                    }), Segment$BsRouter.nil), sumHandler),
          /* :: */[
            Infix$BsRouter.$neg$neg$great(Infix$BsRouter.$slash$question((function (param) {
                        return Infix$BsRouter.$slash((function (param) {
                                      return Segment$BsRouter.s("user", param);
                                    }), Segment$BsRouter.$$int, param);
                      }), Segment$BsRouter.nil), idHandler),
            /* :: */[
              Infix$BsRouter.$neg$neg$great(Infix$BsRouter.$slash$question((function (param) {
                          return Infix$BsRouter.$slash((function (param) {
                                        return Segment$BsRouter.s("user", param);
                                      }), Segment$BsRouter.bool, param);
                        }), Segment$BsRouter.nil), adminHandler),
              /* :: */[
                Infix$BsRouter.$neg$neg$great(Infix$BsRouter.$slash$question((function (param) {
                            return Segment$BsRouter.s("confusing", param);
                          }), Segment$BsRouter.nil), "Foobar"),
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]);

function unwrapResult(param) {
  if (param !== undefined) {
    return param;
  } else {
    return "No match";
  }
}

Belt_List.forEach(/* :: */[
      "sum/12/127",
      /* :: */[
        "/hi",
        /* :: */[
          "/hello/from/routes",
          /* :: */[
            "/user/121",
            /* :: */[
              "user/false",
              /* :: */[
                "confusing/",
                /* :: */[
                  "confusing",
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ], (function (target) {
        console.log(unwrapResult(Router$BsRouter.match$prime(target)(routes)));
        return /* () */0;
      }));

exports.hiHandler = hiHandler;
exports.helloHandler = helloHandler;
exports.sumHandler = sumHandler;
exports.idHandler = idHandler;
exports.adminHandler = adminHandler;
exports.routes = routes;
exports.unwrapResult = unwrapResult;
/* routes Not a pure module */

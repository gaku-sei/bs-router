// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Infix$BsRouter = require("../src/Infix.bs.js");
var Router$BsRouter = require("../src/Router.bs.js");
var Segment$BsRouter = require("../src/Segment.bs.js");

function shapeOfString(param) {
  switch (param) {
    case "circle" :
        return /* Circle */0;
    case "square" :
        return /* Square */1;
    default:
      return ;
  }
}

function shapeToString(param) {
  if (param) {
    return "square";
  } else {
    return "circle";
  }
}

function shape(param) {
  return Segment$BsRouter.pattern(":shape", shapeOfString, shapeToString, param);
}

function process_shape(s) {
  if (s) {
    return "square";
  } else {
    return "circle";
  }
}

function route(param) {
  return Infix$BsRouter.$slash$question((function (param) {
                return Infix$BsRouter.$slash((function (param) {
                              return Infix$BsRouter.$slash((function (param) {
                                            return Segment$BsRouter.s("shape", param);
                                          }), shape, param);
                            }), (function (param) {
                              return Segment$BsRouter.s("create", param);
                            }), param);
              }), Segment$BsRouter.nil);
}

var router = Router$BsRouter.make(/* :: */[
      Infix$BsRouter.$neg$neg$great(route(/* () */0), process_shape),
      /* [] */0
    ]);

Router$BsRouter.match$prime("/shape/circle/create")(router);

Router$BsRouter.match$prime("/shape/square/create")(router);

Router$BsRouter.match$prime("/shape/triangle/create")(router);

exports.shapeOfString = shapeOfString;
exports.shapeToString = shapeToString;
exports.shape = shape;
exports.process_shape = process_shape;
exports.route = route;
exports.router = router;
/* router Not a pure module */

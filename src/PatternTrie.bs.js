// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");

var Key = { };

var empty = {
  capture: undefined,
  children: Belt_MapString.empty,
  parsers: /* [] */0
};

function feedParams(t, params) {
  var _t = t;
  var _params = params;
  while(true) {
    var params$1 = _params;
    var t$1 = _t;
    var rs = t$1.parsers;
    var capture = t$1.capture;
    var exit = 0;
    if (rs || params$1) {
      exit = 1;
    } else {
      return /* [] */0;
    }
    if (exit === 1) {
      if (params$1) {
        var x = params$1[0];
        if (x === "" && !params$1[1]) {
          return rs;
        }
        var xs = params$1[1];
        var match = Belt_MapString.get(t$1.children, x);
        if (match !== undefined) {
          _params = xs;
          _t = match;
          continue ;
        } else if (capture !== undefined) {
          _params = xs;
          _t = capture;
          continue ;
        } else {
          return /* [] */0;
        }
      } else {
        return rs;
      }
    }
    
  };
}

function add(k, v, t) {
  var aux = function (k, t) {
    if (k) {
      var children = t.children;
      var capture = t.capture;
      var r = k[1];
      var x = k[0];
      if (x) {
        var w = x[0];
        var match = Belt_MapString.get(children, w);
        var t$prime = match !== undefined ? match : empty;
        var t$prime$prime = aux(r, t$prime);
        return {
                capture: t.capture,
                children: Belt_MapString.set(children, w, t$prime$prime),
                parsers: t.parsers
              };
      } else {
        var t$prime$1 = capture !== undefined ? capture : empty;
        var t$prime$prime$1 = aux(r, t$prime$1);
        return {
                capture: t$prime$prime$1,
                children: t.children,
                parsers: t.parsers
              };
      }
    } else {
      return {
              capture: t.capture,
              children: t.children,
              parsers: /* :: */[
                v,
                t.parsers
              ]
            };
    }
  };
  return aux(k, t);
}

exports.Key = Key;
exports.empty = empty;
exports.feedParams = feedParams;
exports.add = add;
/* No side effect */

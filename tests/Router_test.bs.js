// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Path$BsRouter = require("../src/Path.bs.js");
var Infix$BsRouter = require("../src/Infix.bs.js");
var Router$BsRouter = require("../src/Router.bs.js");
var Segment$BsRouter = require("../src/Segment.bs.js");

Jest.describe("Router", (function (param) {
        Jest.describe("Empty router has no match", (function (param) {
                var router = Router$BsRouter.make(/* [] */0);
                Jest.test("Empty router has no match", (function (param) {
                        return Curry._2(Jest.Expect.Operators.$eq, Jest.Expect.expect(Router$BsRouter.match$prime("/foo/bar")(router)), undefined);
                      }));
                return Jest.test("Empty router has no match for empty target", (function (param) {
                              return Curry._2(Jest.Expect.Operators.$eq, Jest.Expect.expect(Router$BsRouter.match$prime("")(router)), undefined);
                            }));
              }));
        Jest.describe("Can extract path parameters", (function (param) {
                var router = Router$BsRouter.make(/* :: */[
                      Infix$BsRouter.$neg$neg$great(Infix$BsRouter.$slash$question((function (param) {
                                  return Infix$BsRouter.$slash((function (param) {
                                                return Segment$BsRouter.s("foo", param);
                                              }), Segment$BsRouter.str, param);
                                }), Segment$BsRouter.nil), (function (x) {
                              return x;
                            })),
                      /* :: */[
                        Infix$BsRouter.$neg$neg$great(Infix$BsRouter.$slash$question((function (param) {
                                    return Infix$BsRouter.$slash((function (param) {
                                                  return Infix$BsRouter.$slash((function (param) {
                                                                return Infix$BsRouter.$slash((function (param) {
                                                                              return Segment$BsRouter.s("numbers", param);
                                                                            }), Segment$BsRouter.$$int, param);
                                                              }), Segment$BsRouter.$$int, param);
                                                }), Segment$BsRouter.$$int, param);
                                  }), Segment$BsRouter.nil), (function (a, b, c) {
                                return "" + (String(a) + ("-" + (String(b) + ("-" + (String(c) + "")))));
                              })),
                        /* [] */0
                      ]
                    ]);
                Jest.test("Can extract a string and an integer", (function (param) {
                        return Curry._2(Jest.Expect.Operators.$eq, Jest.Expect.expect(Router$BsRouter.match$prime("foo/Movie")(router)), "Movie");
                      }));
                return Jest.test("Can extract multiple path parameters", (function (param) {
                              return Curry._2(Jest.Expect.Operators.$eq, Jest.Expect.expect(Router$BsRouter.match$prime("/numbers/1/2/3")(router)), "1-2-3");
                            }));
              }));
        Jest.describe("Segment", (function (param) {
                Jest.testAll("Can stringify properly", /* :: */[
                      /* tuple */[
                        Infix$BsRouter.$slash$question((function (param) {
                                return Segment$BsRouter.s("", param);
                              }), Segment$BsRouter.nil),
                        "/"
                      ],
                      /* :: */[
                        /* tuple */[
                          Infix$BsRouter.$slash$question((function (param) {
                                  return Segment$BsRouter.s("foo", param);
                                }), Segment$BsRouter.trail),
                          "/foo/"
                        ],
                        /* :: */[
                          /* tuple */[
                            Infix$BsRouter.$slash$question((function (param) {
                                    return Infix$BsRouter.$slash((function (param) {
                                                  return Segment$BsRouter.s("foo", param);
                                                }), (function (param) {
                                                  return Segment$BsRouter.s("bar", param);
                                                }), param);
                                  }), Segment$BsRouter.nil),
                            "/foo/bar"
                          ],
                          /* [] */0
                        ]
                      ]
                    ], (function (param) {
                        return Curry._2(Jest.Expect.Operators.$eq, Jest.Expect.expect(Segment$BsRouter.stringify(param[0])), param[1]);
                      }));
                return Jest.testAll("Can stringify properly complex segments", /* :: */[
                            /* tuple */[
                              Infix$BsRouter.$slash$question((function (param) {
                                      return Infix$BsRouter.$slash((function (param) {
                                                    return Infix$BsRouter.$slash((function (param) {
                                                                  return Segment$BsRouter.s("foo", param);
                                                                }), Segment$BsRouter.str, param);
                                                  }), Segment$BsRouter.bool, param);
                                    }), Segment$BsRouter.nil),
                              "/foo/:string/:bool"
                            ],
                            /* :: */[
                              /* tuple */[
                                Infix$BsRouter.$slash$question((function (param) {
                                        return Infix$BsRouter.$slash((function (param) {
                                                      return Infix$BsRouter.$slash((function (param) {
                                                                    return Segment$BsRouter.s("foo", param);
                                                                  }), Segment$BsRouter.str, param);
                                                    }), Segment$BsRouter.bool, param);
                                      }), Segment$BsRouter.trail),
                                "/foo/:string/:bool/"
                              ],
                              /* [] */0
                            ]
                          ], (function (param) {
                              return Curry._2(Jest.Expect.Operators.$eq, Jest.Expect.expect(Segment$BsRouter.stringify(param[0])), param[1]);
                            }));
              }));
        return Jest.describe("Path", (function (param) {
                      return Jest.testAll("Can stringify properly", /* :: */[
                                  /* tuple */[
                                    Infix$BsRouter.$slash$question((function (param) {
                                            return Segment$BsRouter.s("", param);
                                          }), Segment$BsRouter.nil),
                                    "/"
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      Infix$BsRouter.$slash$question((function (param) {
                                              return Segment$BsRouter.s("foo", param);
                                            }), Segment$BsRouter.trail),
                                      "/foo/"
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        Infix$BsRouter.$slash$question((function (param) {
                                                return Infix$BsRouter.$slash((function (param) {
                                                              return Segment$BsRouter.s("foo", param);
                                                            }), (function (param) {
                                                              return Segment$BsRouter.s("bar", param);
                                                            }), param);
                                              }), Segment$BsRouter.nil),
                                        "/foo/bar"
                                      ],
                                      /* [] */0
                                    ]
                                  ]
                                ], (function (param) {
                                    return Curry._2(Jest.Expect.Operators.$eq, Jest.Expect.expect(Path$BsRouter.stringify(Infix$BsRouter.$neg$neg$great(param[0], (function (x) {
                                                              return x;
                                                            })))), param[1]);
                                  }));
                    }));
      }));

/*  Not a pure module */
